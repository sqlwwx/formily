{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/array-items/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ArrayField } from '@formily/core'\nimport {\n  useField,\n  observer,\n  useFieldSchema,\n  RecursionField,\n} from '@formily/react'\nimport cls from 'classnames'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport { ISchema } from '@formily/json-schema'\nimport { usePrefixCls } from '../__builtins__'\nimport { ArrayBase, ArrayBaseMixins } from '../array-base'\n\ntype ComposedArrayItems = React.FC<React.HTMLAttributes<HTMLDivElement>> &\n  ArrayBaseMixins & {\n    Item?: React.FC<\n      React.HTMLAttributes<HTMLDivElement> & {\n        type?: 'card' | 'divide'\n      }\n    >\n  }\n\nconst SortableItem = SortableElement(\n  (props: React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>) => {\n    const prefixCls = usePrefixCls('formily-array-items')\n    return (\n      <div {...props} className={cls(`${prefixCls}-item`, props.className)}>\n        {props.children}\n      </div>\n    )\n  }\n)\n\nconst SortableList = SortableContainer(\n  (props: React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>) => {\n    const prefixCls = usePrefixCls('formily-array-items')\n    return (\n      <div {...props} className={cls(`${prefixCls}-list`, props.className)}>\n        {props.children}\n      </div>\n    )\n  }\n)\n\nconst isAdditionComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Addition') > -1\n}\n\nconst useAddition = () => {\n  const schema = useFieldSchema()\n  return schema.reduceProperties((addition, schema, key) => {\n    if (isAdditionComponent(schema)) {\n      return <RecursionField schema={schema} name={key} />\n    }\n    return addition\n  }, null)\n}\n\nexport const ArrayItems: ComposedArrayItems = observer((props) => {\n  const field = useField<ArrayField>()\n  const prefixCls = usePrefixCls('formily-array-items')\n  const schema = useFieldSchema()\n  const addition = useAddition()\n  const dataSource = Array.isArray(field.value) ? field.value : []\n  if (!schema) throw new Error('can not found schema object')\n  return (\n    <ArrayBase>\n      <div\n        {...props}\n        onChange={() => {}}\n        className={cls(prefixCls, props.className)}\n      >\n        <SortableList\n          useDragHandle\n          lockAxis=\"y\"\n          helperClass={`${prefixCls}-sort-helper`}\n          onSortEnd={({ oldIndex, newIndex }) => {\n            field.move(oldIndex, newIndex)\n          }}\n        >\n          {dataSource?.map((item, index) => {\n            const items = Array.isArray(schema.items)\n              ? schema.items[index] || schema.items[0]\n              : schema.items\n            return (\n              <ArrayBase.Item key={index} index={index} record={item}>\n                <SortableItem key={`item-${index}`} index={index}>\n                  <div className={`${prefixCls}-item-inner`}>\n                    <RecursionField schema={items} name={index} />\n                  </div>\n                </SortableItem>\n              </ArrayBase.Item>\n            )\n          })}\n        </SortableList>\n        {addition}\n      </div>\n    </ArrayBase>\n  )\n})\n\nArrayItems.displayName = 'ArrayItems'\n\nArrayItems.Item = (props) => {\n  const prefixCls = usePrefixCls('formily-array-items')\n  return (\n    <div\n      {...props}\n      onChange={() => {}}\n      className={cls(`${prefixCls}-${props.type || 'card'}`, props.className)}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nArrayBase.mixin(ArrayItems)\n\nexport default ArrayItems\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/array-collapse/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\nimport {\n  Badge,\n  Card,\n  Collapse,\n  CollapsePanelProps,\n  CollapseProps,\n  Empty,\n} from 'antd'\nimport { ArrayField } from '@formily/core'\nimport {\n  RecursionField,\n  useField,\n  useFieldSchema,\n  observer,\n  ISchema,\n} from '@formily/react'\nimport { toArr } from '@formily/shared'\nimport cls from 'classnames'\nimport ArrayBase, { ArrayBaseMixins } from '../array-base'\nimport { usePrefixCls } from '../__builtins__'\n\nexport interface IArrayCollapseProps extends CollapseProps {\n  defaultOpenPanelCount?: number\n}\ntype ComposedArrayCollapse = React.FC<IArrayCollapseProps> &\n  ArrayBaseMixins & {\n    CollapsePanel?: React.FC<CollapsePanelProps>\n  }\n\nconst isAdditionComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Addition') > -1\n}\n\nconst isIndexComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Index') > -1\n}\n\nconst isRemoveComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Remove') > -1\n}\n\nconst isMoveUpComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('MoveUp') > -1\n}\n\nconst isMoveDownComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('MoveDown') > -1\n}\n\nconst isOperationComponent = (schema: ISchema) => {\n  return (\n    isAdditionComponent(schema) ||\n    isRemoveComponent(schema) ||\n    isMoveDownComponent(schema) ||\n    isMoveUpComponent(schema)\n  )\n}\n\nconst range = (count: number) => Array.from({ length: count }).map((_, i) => i)\n\nconst takeDefaultActiveKeys = (\n  dataSourceLength: number,\n  defaultOpenPanelCount: number\n) => {\n  if (dataSourceLength < defaultOpenPanelCount) return range(dataSourceLength)\n  return range(defaultOpenPanelCount)\n}\n\nconst insertActiveKeys = (activeKeys: number[], index: number) => {\n  if (activeKeys.length <= index) return activeKeys.concat(index)\n  return activeKeys.reduce((buf, key) => {\n    if (key < index) return buf.concat(key)\n    if (key === index) return buf.concat([key, key + 1])\n    return buf.concat(key + 1)\n  }, [])\n}\n\nexport const ArrayCollapse: ComposedArrayCollapse = observer(\n  (props: IArrayCollapseProps) => {\n    const field = useField<ArrayField>()\n    const dataSource = Array.isArray(field.value) ? field.value : []\n    const [activeKeys, setActiveKeys] = useState<number[]>(\n      takeDefaultActiveKeys(dataSource.length, props.defaultOpenPanelCount)\n    )\n    const schema = useFieldSchema()\n    const prefixCls = usePrefixCls('formily-array-collapse', props)\n    useEffect(() => {\n      if (!field.modified && dataSource.length) {\n        setActiveKeys(\n          takeDefaultActiveKeys(dataSource.length, props.defaultOpenPanelCount)\n        )\n      }\n    }, [dataSource.length, field])\n    if (!schema) throw new Error('can not found schema object')\n\n    const renderAddition = () => {\n      return schema.reduceProperties((addition, schema, key) => {\n        if (isAdditionComponent(schema)) {\n          return <RecursionField schema={schema} name={key} />\n        }\n        return addition\n      }, null)\n    }\n    const renderEmpty = () => {\n      if (dataSource.length) return\n      return (\n        <Card className={cls(`${prefixCls}-item`, props.className)}>\n          <Empty />\n        </Card>\n      )\n    }\n\n    const renderItems = () => {\n      return (\n        <Collapse\n          {...props}\n          activeKey={activeKeys}\n          onChange={(keys: string[]) => setActiveKeys(toArr(keys).map(Number))}\n          className={cls(`${prefixCls}-item`, props.className)}\n        >\n          {dataSource.map((item, index) => {\n            const items = Array.isArray(schema.items)\n              ? schema.items[index] || schema.items[0]\n              : schema.items\n\n            const panelProps = field\n              .query(`${field.address}.${index}`)\n              .get('componentProps')\n            const props: CollapsePanelProps = items['x-component-props']\n            const header = () => {\n              const header = `${\n                panelProps?.header || props.header || field.title\n              }`\n              const path = field.address.concat(index)\n              const errors = field.form.queryFeedbacks({\n                type: 'error',\n                address: `${path}.**`,\n              })\n              return (\n                <ArrayBase.Item index={index} record={item}>\n                  <RecursionField\n                    schema={items}\n                    name={index}\n                    filterProperties={(schema) => {\n                      if (!isIndexComponent(schema)) return false\n                      return true\n                    }}\n                    onlyRenderProperties\n                  />\n                  {errors.length ? (\n                    <Badge\n                      size=\"small\"\n                      className=\"errors-badge\"\n                      count={errors.length}\n                    >\n                      {header}\n                    </Badge>\n                  ) : (\n                    header\n                  )}\n                </ArrayBase.Item>\n              )\n            }\n\n            const extra = (\n              <ArrayBase.Item index={index} record={item}>\n                <RecursionField\n                  schema={items}\n                  name={index}\n                  filterProperties={(schema) => {\n                    if (!isOperationComponent(schema)) return false\n                    return true\n                  }}\n                  onlyRenderProperties\n                />\n                {props?.extra}\n              </ArrayBase.Item>\n            )\n\n            const content = (\n              <RecursionField\n                schema={items}\n                name={index}\n                filterProperties={(schema) => {\n                  if (isIndexComponent(schema)) return false\n                  if (isOperationComponent(schema)) return false\n                  return true\n                }}\n              />\n            )\n            return (\n              <Collapse.Panel\n                {...props}\n                {...panelProps}\n                forceRender\n                key={index}\n                header={header()}\n                extra={extra}\n              >\n                <ArrayBase.Item index={index} key={index} record={item}>\n                  {content}\n                </ArrayBase.Item>\n              </Collapse.Panel>\n            )\n          })}\n        </Collapse>\n      )\n    }\n    return (\n      <ArrayBase\n        onAdd={(index) => {\n          setActiveKeys(insertActiveKeys(activeKeys, index))\n        }}\n      >\n        {renderEmpty()}\n        {renderItems()}\n        {renderAddition()}\n      </ArrayBase>\n    )\n  }\n)\n\nconst CollapsePanel: React.FC<CollapsePanelProps> = ({ children }) => {\n  return <Fragment>{children}</Fragment>\n}\n\nCollapsePanel.displayName = 'CollapsePanel'\n\nArrayCollapse.defaultProps = {\n  defaultOpenPanelCount: 5,\n}\nArrayCollapse.displayName = 'ArrayCollapse'\nArrayCollapse.CollapsePanel = CollapsePanel\n\nArrayBase.mixin(ArrayCollapse)\n\nexport default ArrayCollapse\n"]}
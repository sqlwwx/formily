{"version":3,"file":"onFieldEffects.js","sourceRoot":"","sources":["../../src/effects/onFieldEffects.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormPath, isFn, toArr } from '@formily/shared'\nimport { autorun, reaction, batch } from '@formily/reactive'\nimport { Form } from '../models'\nimport {\n  LifeCycleTypes,\n  FormPathPattern,\n  GeneralField,\n  DataField,\n  IFieldState,\n} from '../types'\nimport { createEffectHook, useEffectForm } from '../shared/effective'\nimport { onFormUnmount } from './onFormEffects'\n\nfunction createFieldEffect<Result extends GeneralField = GeneralField>(\n  type: LifeCycleTypes\n) {\n  return createEffectHook(\n    type,\n    (field: Result, form: Form) =>\n      (\n        pattern: FormPathPattern,\n        callback: (field: Result, form: Form) => void\n      ) => {\n        if (\n          FormPath.parse(pattern).matchAliasGroup(field.address, field.path)\n        ) {\n          batch(() => {\n            callback(field, form)\n          })\n        }\n      }\n  )\n}\nconst _onFieldInit = createFieldEffect(LifeCycleTypes.ON_FIELD_INIT)\nexport const onFieldMount = createFieldEffect(LifeCycleTypes.ON_FIELD_MOUNT)\nexport const onFieldUnmount = createFieldEffect(LifeCycleTypes.ON_FIELD_UNMOUNT)\nexport const onFieldValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALUE_CHANGE\n)\nexport const onFieldInitialValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE\n)\nexport const onFieldInputValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE\n)\nexport const onFieldValidateStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_START\n)\nexport const onFieldValidateEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_END\n)\nexport const onFieldValidating = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATING\n)\nexport const onFieldValidateFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_FAILED\n)\nexport const onFieldValidateSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS\n)\nexport const onFieldSubmit = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT\n)\nexport const onFieldSubmitStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_START\n)\nexport const onFieldSubmitEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_END\n)\nexport const onFieldSubmitValidateStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START\n)\nexport const onFieldSubmitValidateEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END\n)\nexport const onFieldSubmitSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS\n)\nexport const onFieldSubmitFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_FAILED\n)\nexport const onFieldSubmitValidateSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS\n)\nexport const onFieldSubmitValidateFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED\n)\nexport const onFieldReset = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_RESET\n)\nexport const onFieldLoading = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_LOADING\n)\n\nexport function onFieldInit(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n) {\n  const form = useEffectForm()\n  const count = form.query(pattern).reduce((count, field) => {\n    callback(field, form)\n    return count + 1\n  }, 0)\n  if (count === 0) {\n    _onFieldInit(pattern, callback)\n  }\n}\n\nexport function onFieldReact(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n) {\n  const disposers = []\n  onFieldInit(pattern, (field, form) => {\n    disposers.push(\n      autorun(() => {\n        if (isFn(callback)) callback(field, form)\n      })\n    )\n  })\n  onFormUnmount(() => {\n    disposers.forEach((dispose) => {\n      dispose()\n    })\n  })\n}\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n): void\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  watches: (keyof IFieldState)[],\n  callback?: (field: GeneralField, form: Form) => void\n): void\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  watches: any,\n  callback?: (field: GeneralField, form: Form) => void\n): void {\n  if (isFn(watches)) {\n    callback = watches\n    watches = ['value']\n  } else {\n    watches = watches || ['value']\n  }\n  const disposers = []\n  onFieldInit(pattern, (field, form) => {\n    if (isFn(callback)) callback(field, form)\n    disposers.push(\n      reaction(\n        () => {\n          return toArr(watches).map((key) => {\n            return field[key]\n          })\n        },\n        () => {\n          if (isFn(callback)) callback(field, form)\n        }\n      )\n    )\n  })\n\n  onFormUnmount(() => {\n    disposers.forEach((dispose) => {\n      dispose()\n    })\n  })\n}\n"]}
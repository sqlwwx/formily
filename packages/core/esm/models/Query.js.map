{"version":3,"file":"Query.js","sourceRoot":"","sources":["../../src/models/Query.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormPath, isFn, each, FormPathPattern } from '@formily/shared'\nimport { GeneralField, IGeneralFieldState, IQueryProps } from '../types'\nimport { Form } from './Form'\n\nconst output = (\n  field: GeneralField,\n  taker: (field: GeneralField, address: FormPath) => any\n) => {\n  if (!field) return\n  if (isFn(taker)) {\n    return taker(field, field.address)\n  }\n  return field\n}\n\nexport class Query {\n  private pattern: FormPath\n  private addresses: string[] = []\n  private form: Form\n  constructor(props: IQueryProps) {\n    this.pattern = FormPath.parse(props.pattern, props.base)\n    this.form = props.form\n    if (!this.pattern.isMatchPattern) {\n      const identifier = this.pattern.toString()\n      const indexIdentifier = this.form.indexes[identifier]\n      const absoluteField = this.form.fields[identifier]\n      const indexField = this.form.fields[indexIdentifier]\n      if (absoluteField) {\n        this.addresses = [identifier]\n      } else if (indexField) {\n        this.addresses = [indexIdentifier]\n      }\n    } else {\n      each(this.form.fields, (field, address) => {\n        if (field.match(this.pattern)) {\n          this.addresses.push(address)\n        }\n      })\n    }\n  }\n\n  take(): GeneralField\n  take<Result>(\n    getter: (field: GeneralField, address: FormPath) => Result\n  ): Result\n  take(taker?: any): any {\n    return output(this.form.fields[this.addresses[0]], taker)\n  }\n\n  map(): GeneralField[]\n  map<Result>(\n    iterator?: (field: GeneralField, address: FormPath) => Result\n  ): Result[]\n  map(iterator?: any): any {\n    return this.addresses.map((address) =>\n      output(this.form.fields[address], iterator)\n    )\n  }\n\n  forEach<Result>(\n    iterator: (field: GeneralField, address: FormPath) => Result\n  ) {\n    return this.addresses.forEach((address) =>\n      output(this.form.fields[address], iterator)\n    )\n  }\n\n  reduce<Result>(\n    reducer: (value: Result, field: GeneralField, address: FormPath) => Result,\n    initial?: Result\n  ): Result {\n    return this.addresses.reduce(\n      (value, address) =>\n        output(this.form.fields[address], (field, address) =>\n          reducer(value, field, address)\n        ),\n      initial\n    )\n  }\n\n  get<K extends keyof IGeneralFieldState>(key: K): IGeneralFieldState[K] {\n    const results: any = this.take()\n    if (results) {\n      return results[key]\n    }\n  }\n\n  getIn(pattern?: FormPathPattern) {\n    return FormPath.getIn(this.take(), pattern)\n  }\n\n  value() {\n    return this.form.getValuesIn(this.pattern)\n  }\n\n  initialValue() {\n    return this.form.getInitialValuesIn(this.pattern)\n  }\n}\n"]}
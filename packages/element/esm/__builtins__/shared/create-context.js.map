{"version":3,"file":"create-context.js","sourceRoot":"","sources":["../../../src/__builtins__/shared/create-context.ts"],"names":[],"mappings":"AACA,OAAO,EACL,eAAe,EACf,OAAO,EACP,MAAM,EACN,QAAQ,EAER,GAAG,EAEH,KAAK,GACN,MAAM,sBAAsB,CAAA;AAQ7B,MAAM,CAAC,IAAM,aAAa,GAAG,UAAI,YAAgB;IAC/C,IAAM,SAAS,GAAyB,MAAM,EAAE,CAAA;IAEhD,OAAO;QACL,QAAQ,EAAE,eAAe,CAAC;YACxB,IAAI,EAAE,iBAAiB;YACvB,KAAK,EAAE;gBACL,KAAK,EAAE;oBACL,IAAI,EAAE,IAAI;oBACV,OAAO;wBACL,OAAO,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,IAAI,CAAA;oBAC7B,CAAC;iBACF;aACF;YACD,KAAK,YAAC,KAAK,EAAE,EAAS;oBAAP,KAAK,WAAA;gBAClB,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;gBACnC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;gBAEnC,OAAO,sBAAM,OAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,+CAAd,KAAK,CAAa,CAAA,EAAA,CAAA;YACjC,CAAC;SACF,CAAC;QAEF,QAAQ,EAAE,eAAe,CAAC;YACxB,IAAI,EAAE,iBAAiB;YACvB,KAAK,YAAC,MAAM,EAAE,EAAS;oBAAP,KAAK,WAAA;gBACnB,IAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAA;gBAE/B,OAAO,sBAAM,OAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,+CAAd,KAAK,EAAY,KAAK,CAAC,CAAA,EAAA,CAAA;YACtC,CAAC;SACF,CAAC;QACF,SAAS,WAAA;KACV,CAAA;AACH,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,UAAU,GAAG,UAAI,OAAyB;IACrD,IAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAA;IAE7B,OAAO,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;AAC/B,CAAC,CAAA","sourcesContent":["import type { Component } from 'vue'\nimport {\n  defineComponent,\n  provide,\n  inject,\n  readonly,\n  InjectionKey,\n  ref,\n  Ref,\n  toRef,\n} from '@vue/composition-api'\n\nexport type CreateContext<T> = {\n  Provider: Component\n  Consumer: Component\n  injectKey: InjectionKey<Ref<T>>\n}\n\nexport const createContext = <T>(defaultValue?: T): CreateContext<T> => {\n  const injectKey: InjectionKey<Ref<T>> = Symbol()\n\n  return {\n    Provider: defineComponent({\n      name: 'ContextProvider',\n      props: {\n        value: {\n          type: null,\n          default() {\n            return defaultValue ?? null\n          },\n        },\n      },\n      setup(props, { slots }) {\n        const value = toRef(props, 'value')\n        provide(injectKey, readonly(value))\n\n        return () => slots?.default?.()\n      },\n    }),\n\n    Consumer: defineComponent({\n      name: 'ContextConsumer',\n      setup(_props, { slots }) {\n        const value = inject(injectKey)\n\n        return () => slots?.default?.(value)\n      },\n    }),\n    injectKey,\n  }\n}\n\nexport const useContext = <T>(context: CreateContext<T>) => {\n  const key = context.injectKey\n\n  return inject(key, ref(null))\n}\n"]}
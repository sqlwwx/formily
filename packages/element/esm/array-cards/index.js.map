{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/array-cards/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { defineComponent } from '@vue/composition-api'\nimport { Card, Empty, Row } from 'element-ui'\nimport type { Card as CardProps } from 'element-ui'\nimport { ArrayField } from '@formily/core'\nimport { useField, useFieldSchema, RecursionField, h } from '@formily/vue'\nimport { observer } from '@formily/reactive-vue'\nimport { ISchema } from '@formily/json-schema'\nimport { stylePrefix } from '../__builtins__/configs'\nimport { ArrayBase } from '../array-base'\nimport { composeExport } from '../__builtins__/shared'\n\nconst isAdditionComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Addition') > -1\n}\n\nconst isIndexComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Index') > -1\n}\n\nconst isRemoveComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Remove') > -1\n}\n\nconst isMoveUpComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('MoveUp') > -1\n}\n\nconst isMoveDownComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('MoveDown') > -1\n}\n\nconst isOperationComponent = (schema: ISchema) => {\n  return (\n    isAdditionComponent(schema) ||\n    isRemoveComponent(schema) ||\n    isMoveDownComponent(schema) ||\n    isMoveUpComponent(schema)\n  )\n}\nconst ArrayCardsInner = observer(\n  defineComponent<CardProps>({\n    name: 'FArrayCards',\n    props: [],\n    setup(props, { attrs }) {\n      const fieldRef = useField<ArrayField>()\n      const schemaRef = useFieldSchema()\n      const prefixCls = `${stylePrefix}-array-cards`\n      const { getKey, keyMap } = ArrayBase.useKey(schemaRef.value)\n\n      return () => {\n        const field = fieldRef.value\n        const schema = schemaRef.value\n        const dataSource = Array.isArray(field.value) ? field.value : []\n        if (!schema) throw new Error('can not found schema object')\n\n        const renderItems = () => {\n          return dataSource?.map((item, index) => {\n            const items = Array.isArray(schema.items)\n              ? schema.items[index] || schema.items[0]\n              : schema.items\n\n            const title = h(\n              'span',\n              {},\n              {\n                default: () => [\n                  h(\n                    RecursionField,\n                    {\n                      props: {\n                        schema: items,\n                        name: index,\n                        filterProperties: (schema) => {\n                          if (!isIndexComponent(schema)) return false\n                          return true\n                        },\n                        onlyRenderProperties: true,\n                      },\n                    },\n                    {}\n                  ),\n                  attrs.title || field.title,\n                ],\n              }\n            )\n            const extra = h(\n              'span',\n              {},\n              {\n                default: () => [\n                  h(\n                    RecursionField,\n                    {\n                      props: {\n                        schema: items,\n                        name: index,\n                        filterProperties: (schema) => {\n                          if (!isOperationComponent(schema)) return false\n                          return true\n                        },\n                        onlyRenderProperties: true,\n                      },\n                    },\n                    {}\n                  ),\n                  attrs.extra,\n                ],\n              }\n            )\n            const content = h(\n              RecursionField,\n              {\n                props: {\n                  schema: items,\n                  name: index,\n                  filterProperties: (schema) => {\n                    if (isIndexComponent(schema)) return false\n                    if (isOperationComponent(schema)) return false\n                    return true\n                  },\n                },\n              },\n              {}\n            )\n\n            return h(\n              ArrayBase.Item,\n              {\n                key: getKey(item, index),\n                props: {\n                  index,\n                  record: item,\n                },\n              },\n              {\n                default: () =>\n                  h(\n                    Card,\n                    {\n                      class: [`${prefixCls}-item`],\n                      attrs: {\n                        shadow: 'never',\n                        ...attrs,\n                      },\n                    },\n                    {\n                      default: () => [content],\n                      header: () =>\n                        h(\n                          Row,\n                          {\n                            props: {\n                              type: 'flex',\n                              justify: 'space-between',\n                            },\n                          },\n                          {\n                            default: () => [title, extra],\n                          }\n                        ),\n                    }\n                  ),\n              }\n            )\n          })\n        }\n        const renderAddition = () => {\n          return schema.reduceProperties((addition, schema) => {\n            if (isAdditionComponent(schema)) {\n              return h(\n                RecursionField,\n                {\n                  props: {\n                    schema,\n                    name: 'addition',\n                  },\n                },\n                {}\n              )\n            }\n            return addition\n          }, null)\n        }\n        const renderEmpty = () => {\n          if (dataSource?.length) return\n          return h(\n            Card,\n            {\n              class: [`${prefixCls}-item`],\n              attrs: {\n                shadow: 'never',\n                ...attrs,\n                header: attrs.title || field.title,\n              },\n            },\n            {\n              default: () =>\n                h(\n                  Empty,\n                  { props: { description: 'No Data', imageSize: 100 } },\n                  {}\n                ),\n            }\n          )\n        }\n\n        return h(\n          'div',\n          {\n            class: [prefixCls],\n          },\n          {\n            default: () =>\n              h(\n                ArrayBase,\n                {\n                  props: {\n                    keyMap,\n                  },\n                },\n                {\n                  default: () => [\n                    renderEmpty(),\n                    renderItems(),\n                    renderAddition(),\n                  ],\n                }\n              ),\n          }\n        )\n      }\n    },\n  })\n)\n\nexport const ArrayCards = composeExport(ArrayCardsInner, {\n  Index: ArrayBase.Index,\n  SortHandle: ArrayBase.SortHandle,\n  Addition: ArrayBase.Addition,\n  Remove: ArrayBase.Remove,\n  MoveDown: ArrayBase.MoveDown,\n  MoveUp: ArrayBase.MoveUp,\n  useArray: ArrayBase.useArray,\n  useIndex: ArrayBase.useIndex,\n  useRecord: ArrayBase.useRecord,\n})\n\nexport default ArrayCards\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/radio/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,EAAE,aAAa,EAAE,MAAM,cAAc,CAAA;AAClE,OAAO,EAAE,eAAe,EAAY,MAAM,sBAAsB,CAAA;AAChE,OAAO,EACL,aAAa,EACb,kBAAkB,EAClB,gBAAgB,GAEjB,MAAM,wBAAwB,CAAA;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAA;;;;AAyB7C,IAAM,qBAAqB,GAAG,kBAAkB,CAAC,YAAY,EAAE;IAC7D,MAAM,EAAE,OAAO;CAChB,CAAC,CAAA;AAEF,IAAM,gBAAgB,GAAG,eAAe,CAAkB;IACxD,IAAI,EAAE,aAAa;IACnB,KAAK,EAAE;QACL,OAAO,EAAE;YACP,IAAI,EAAE,KAA6C;YACnD,OAAO,EAAE,cAAM,OAAA,EAAE,EAAF,CAAE;SAClB;QACD,UAAU,EAAE;YACV,IAAI,EAAE,MAAiD;YACvD,OAAO,EAAE,SAAS;SACnB;KACF;IACD,KAAK,YAAC,WAAW,EAAE,EAA2B;YAAzB,KAAK,WAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAA;QAC1C,OAAO;YACL,IAAM,OAAO,GAAG,WAAW,CAAC,OAAO,IAAI,EAAE,CAAA;YACzC,IAAM,UAAU,GACd,WAAW,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAA;YAC7D,IAAM,QAAQ,GACZ,OAAO,CAAC,MAAM,KAAK,CAAC;gBAClB,CAAC,CAAC;oBACE,OAAO,EAAE;wBACP,OAAA,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM;4BACjB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gCAC9B,OAAO,CAAC,CACN,UAAU,EACV,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAC5B;oCACE,OAAO,EAAE;;wCAAM,OAAA;4CACb,gBAAgB,CAAC,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,mCAAI,MAAM,EAAE,EAAE,MAAM,QAAA,EAAE,CAAC;yCACtD,CAAA;qCAAA;iCACF,CACF,CAAA;6BACF;iCAAM;gCACL,OAAO,CAAC,CACN,UAAU,EACV;oCACE,KAAK,wBACA,MAAM,KACT,KAAK,EAAE,SAAS,EAChB,KAAK,EAAE,MAAM,CAAC,KAAK,GACpB;iCACF,EACD;oCACE,OAAO,EAAE;;wCAAM,OAAA;4CACb,gBAAgB,CAAC,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,mCAAI,MAAM,CAAC,KAAK,EAAE;gDAC9C,MAAM,QAAA;6CACP,CAAC;yCACH,CAAA;qCAAA;iCACF,CACF,CAAA;6BACF;wBACH,CAAC,CAAC;oBA9BF,CA8BE;iBACL;gBACH,CAAC,CAAC,KAAK,CAAA;YACX,OAAO,CAAC,CACN,qBAAqB,EACrB;gBACE,KAAK,eACA,KAAK,CACT;gBACD,EAAE,EAAE,SAAS;aACd,EACD,QAAQ,CACT,CAAA;QACH,CAAC,CAAA;IACH,CAAC;CACF,CAAC,CAAA;AAEF,IAAM,UAAU,GAAG,OAAO,CACxB,gBAAgB,EAChB,QAAQ,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EACnC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAClC,CAAA;AACD,MAAM,CAAC,IAAM,KAAK,GAAG,aAAa,CAAC,OAAO,EAAE;IAC1C,KAAK,EAAE,UAAU;CAClB,CAAC,CAAA;AAEF,eAAe,KAAK,CAAA","sourcesContent":["import { connect, mapProps, h, mapReadPretty } from '@formily/vue'\nimport { defineComponent, PropType } from '@vue/composition-api'\nimport {\n  composeExport,\n  transformComponent,\n  resolveComponent,\n  SlotTypes,\n} from '../__builtins__/shared'\nimport { PreviewText } from '../preview-text'\nimport type {\n  Radio as ElRadioProps,\n  RadioGroup as ElRadioGroupProps,\n} from 'element-ui'\nimport {\n  Radio as ElRadio,\n  RadioGroup as ElRadioGroup,\n  RadioButton,\n} from 'element-ui'\n\nexport type RadioGroupProps = ElRadioGroupProps & {\n  value: any\n  options?: (\n    | (Omit<ElRadioProps, 'value'> & {\n        value: ElRadioProps['label']\n        label: SlotTypes\n      })\n    | string\n  )[]\n  optionType: 'defalt' | 'button'\n}\n\nexport type RadioProps = ElRadioProps\n\nconst TransformElRadioGroup = transformComponent(ElRadioGroup, {\n  change: 'input',\n})\n\nconst RadioGroupOption = defineComponent<RadioGroupProps>({\n  name: 'FRadioGroup',\n  props: {\n    options: {\n      type: Array as PropType<RadioGroupProps['options']>,\n      default: () => [],\n    },\n    optionType: {\n      type: String as PropType<RadioGroupProps['optionType']>,\n      default: 'default',\n    },\n  },\n  setup(customProps, { attrs, slots, listeners }) {\n    return () => {\n      const options = customProps.options || []\n      const OptionType =\n        customProps.optionType === 'button' ? RadioButton : ElRadio\n      const children =\n        options.length !== 0\n          ? {\n              default: () =>\n                options.map((option) => {\n                  if (typeof option === 'string') {\n                    return h(\n                      OptionType,\n                      { props: { label: option } },\n                      {\n                        default: () => [\n                          resolveComponent(slots?.option ?? option, { option }),\n                        ],\n                      }\n                    )\n                  } else {\n                    return h(\n                      OptionType,\n                      {\n                        props: {\n                          ...option,\n                          value: undefined,\n                          label: option.value,\n                        },\n                      },\n                      {\n                        default: () => [\n                          resolveComponent(slots?.option ?? option.label, {\n                            option,\n                          }),\n                        ],\n                      }\n                    )\n                  }\n                }),\n            }\n          : slots\n      return h(\n        TransformElRadioGroup,\n        {\n          attrs: {\n            ...attrs,\n          },\n          on: listeners,\n        },\n        children\n      )\n    }\n  },\n})\n\nconst RadioGroup = connect(\n  RadioGroupOption,\n  mapProps({ dataSource: 'options' }),\n  mapReadPretty(PreviewText.Select)\n)\nexport const Radio = composeExport(ElRadio, {\n  Group: RadioGroup,\n})\n\nexport default Radio\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/reset/index.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,CAAC,EAAE,aAAa,EAAE,MAAM,cAAc,CAAA;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAA;AAChD,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAA;;AAOtD,MAAM,CAAC,IAAM,KAAK,GAAG,QAAQ,CAC3B,eAAe,CAAa;IAC1B,IAAI,EAAE,QAAQ;IACd,KAAK,EAAE;QACL,UAAU,EAAE;YACV,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,KAAK;SACf;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,KAAK;SACf;KACF;IACD,KAAK,EAAL,UAAM,KAAK,EAAE,OAAO;QAClB,IAAM,OAAO,GAAG,aAAa,EAAE,CAAA;QACvB,IAAA,SAAS,GAAY,OAAO,UAAnB,EAAE,KAAK,GAAK,OAAO,MAAZ,CAAY;QACpC,OAAO;YACL,IAAM,IAAI,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAA;YAC3B,OAAO,CAAC,CACN,QAAQ,EACR;gBACE,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,EAAE,wBACG,SAAS,KACZ,KAAK,EAAE,UAAC,CAAM;wBACZ,IAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,EAAE;4BACpB,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK;gCAAE,OAAM;yBACzC;wBACD,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CACA,KAAK,CAAC,GAAG,EAAE;4BACX,UAAU,EAAE,KAAK,CAAC,UAAU;4BAC5B,QAAQ,EAAE,KAAK,CAAC,QAAQ;yBACzB,EACA,IAAI,CAAC,SAAS,CAAC,oBAAwC,EACvD,KAAK,CAAC,SAAS,CAAC,mBAAuC,CAAC,CAAA;oBAC7D,CAAC,GACF;aACF,EACD,KAAK,CACN,CAAA;QACH,CAAC,CAAA;IACH,CAAC;CACF,CAAC,CACH,CAAA;AAED,eAAe,KAAK,CAAA","sourcesContent":["import { IFieldResetOptions } from '@formily/core'\nimport { h, useParentForm } from '@formily/vue'\nimport { observer } from '@formily/reactive-vue'\nimport { defineComponent } from '@vue/composition-api'\n\nimport type { Button as IElButton } from 'element-ui'\nimport { Button as ElButton } from 'element-ui'\n\nexport type ResetProps = IFieldResetOptions & IElButton\n\nexport const Reset = observer(\n  defineComponent<ResetProps>({\n    name: 'FReset',\n    props: {\n      forceClear: {\n        type: Boolean,\n        default: false,\n      },\n      validate: {\n        type: Boolean,\n        default: false,\n      },\n    },\n    setup(props, context) {\n      const formRef = useParentForm()\n      const { listeners, slots } = context\n      return () => {\n        const form = formRef?.value\n        return h(\n          ElButton,\n          {\n            attrs: context.attrs,\n            on: {\n              ...listeners,\n              click: (e: any) => {\n                if (listeners?.click) {\n                  if (listeners.click(e) === false) return\n                }\n                form\n                  ?.reset('*', {\n                    forceClear: props.forceClear,\n                    validate: props.validate,\n                  })\n                  .then(listeners.resetValidateSuccess as (e: any) => void)\n                  .catch(listeners.resetValidateFailed as (e: any) => void)\n              },\n            },\n          },\n          slots\n        )\n      }\n    },\n  })\n)\n\nexport default Reset\n"]}
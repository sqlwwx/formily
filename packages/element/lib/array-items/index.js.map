{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/array-items/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { defineComponent } from '@vue/composition-api'\nimport { ArrayField } from '@formily/core'\nimport { useField, useFieldSchema, RecursionField, h } from '@formily/vue'\nimport { observer } from '@formily/reactive-vue'\nimport { ISchema } from '@formily/json-schema'\nimport { stylePrefix } from '../__builtins__/configs'\nimport { ArrayBase } from '../array-base'\nimport { SlickList, SlickItem } from 'vue-slicksort'\nimport { composeExport } from '../__builtins__/shared'\n\nconst isAdditionComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Addition') > -1\n}\n\nexport interface IArrayItemsItemProps {\n  type?: 'card' | 'divide'\n}\n\nconst ArrayItemsInner = observer(\n  defineComponent({\n    name: 'FArrayItems',\n    setup(props, { attrs }) {\n      const fieldRef = useField<ArrayField>()\n      const schemaRef = useFieldSchema()\n\n      const prefixCls = `${stylePrefix}-array-items`\n      const { getKey, keyMap } = ArrayBase.useKey(schemaRef.value)\n\n      return () => {\n        const field = fieldRef.value\n        const schema = schemaRef.value\n        const dataSource = Array.isArray(field.value) ? field.value.slice() : []\n\n        const renderItems = () => {\n          const items = dataSource?.map((item, index) => {\n            const items = Array.isArray(schema.items)\n              ? schema.items[index] || schema.items[0]\n              : schema.items\n            const key = getKey(item, index)\n            return h(\n              ArrayBase.Item,\n              {\n                key,\n                props: {\n                  index,\n                  record: item,\n                },\n              },\n              {\n                default: () =>\n                  h(\n                    SlickItem,\n                    {\n                      class: [`${prefixCls}-item-inner`],\n                      props: {\n                        index,\n                      },\n                      key,\n                    },\n                    {\n                      default: () =>\n                        h(\n                          RecursionField,\n                          {\n                            props: {\n                              schema: items,\n                              name: index,\n                            },\n                          },\n                          {}\n                        ),\n                    }\n                  ),\n              }\n            )\n          })\n\n          return h(\n            SlickList,\n            {\n              class: [`${prefixCls}-list`],\n              props: {\n                useDragHandle: true,\n                lockAxis: 'y',\n                helperClass: `${prefixCls}-sort-helper`,\n                value: [],\n              },\n              on: {\n                'sort-end': ({ oldIndex, newIndex }) => {\n                  if (Array.isArray(keyMap)) {\n                    keyMap.splice(newIndex, 0, keyMap.splice(oldIndex, 1)[0])\n                  }\n                  field.move(oldIndex, newIndex)\n                },\n              },\n            },\n            { default: () => items }\n          )\n        }\n        const renderAddition = () => {\n          return schema.reduceProperties((addition, schema) => {\n            if (isAdditionComponent(schema)) {\n              return h(\n                RecursionField,\n                {\n                  props: {\n                    schema,\n                    name: 'addition',\n                  },\n                },\n                {}\n              )\n            }\n            return addition\n          }, null)\n        }\n\n        return h(\n          ArrayBase,\n          {\n            props: {\n              keyMap,\n            },\n          },\n          {\n            default: () =>\n              h(\n                'div',\n                {\n                  class: [prefixCls],\n                  on: {\n                    change: () => {},\n                  },\n                },\n                {\n                  default: () => [renderItems(), renderAddition()],\n                }\n              ),\n          }\n        )\n      }\n    },\n  })\n)\n\nconst ArrayItemsItem = defineComponent<IArrayItemsItemProps>({\n  name: 'FArrayItemsItem',\n  props: ['type'],\n  setup(props, { attrs, slots }) {\n    const prefixCls = `${stylePrefix}-array-items`\n\n    return () =>\n      h(\n        'div',\n        {\n          class: [`${prefixCls}-${props.type || 'card'}`],\n          attrs: {\n            ...attrs,\n          },\n          on: {\n            change: () => {},\n          },\n        },\n        slots\n      )\n  },\n})\n\nexport const ArrayItems = composeExport(ArrayItemsInner, {\n  Item: ArrayItemsItem,\n  Index: ArrayBase.Index,\n  SortHandle: ArrayBase.SortHandle,\n  Addition: ArrayBase.Addition,\n  Remove: ArrayBase.Remove,\n  MoveDown: ArrayBase.MoveDown,\n  MoveUp: ArrayBase.MoveUp,\n  useArray: ArrayBase.useArray,\n  useIndex: ArrayBase.useIndex,\n  useRecord: ArrayBase.useRecord,\n})\n\nexport default ArrayItems\n"]}
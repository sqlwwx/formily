{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/checkbox/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { connect, mapProps, h, mapReadPretty } from '@formily/vue'\nimport { defineComponent, PropType } from '@vue/composition-api'\nimport {\n  composeExport,\n  transformComponent,\n  resolveComponent,\n  SlotTypes,\n} from '../__builtins__/shared'\nimport type {\n  Checkbox as _ElCheckboxProps,\n  CheckboxGroup as ElCheckboxGroupProps,\n} from 'element-ui'\nimport {\n  Checkbox as ElCheckbox,\n  CheckboxGroup as ElCheckboxGroup,\n  CheckboxButton as ElCheckboxButton,\n} from 'element-ui'\nimport { PreviewText } from '../preview-text'\n\ntype ElCheckboxProps = Omit<_ElCheckboxProps, 'value'> & {\n  value: ElCheckboxProps['label']\n}\n\nexport interface CheckboxProps extends ElCheckboxProps {\n  option: Omit<_ElCheckboxProps, 'value'> & {\n    value: ElCheckboxProps['label']\n    label: SlotTypes\n  }\n}\n\nconst CheckboxOption = defineComponent<CheckboxProps>({\n  name: 'Checkbox',\n  inheritAttrs: false,\n  props: {\n    option: {\n      type: Object,\n      default: null,\n    },\n  },\n  setup(curtomProps, { attrs, slots, listeners }) {\n    return () => {\n      const props = attrs as unknown as CheckboxProps\n      const option = curtomProps?.option\n      if (option) {\n        const children = {\n          default: () => [\n            resolveComponent(slots.default ?? option.label, { option }),\n          ],\n        }\n        const newProps = {} as Partial<ElCheckboxProps>\n        Object.assign(newProps, option)\n        newProps.label = option.value\n        delete newProps.value\n\n        return h(\n          attrs.optionType === 'button' ? ElCheckboxButton : ElCheckbox,\n          {\n            attrs: {\n              ...newProps,\n            },\n          },\n          children\n        )\n      }\n\n      return h(\n        ElCheckbox,\n        {\n          attrs: {\n            ...props,\n          },\n          on: listeners,\n        },\n        slots\n      )\n    }\n  },\n})\n\nexport type CheckboxGroupProps = ElCheckboxGroupProps & {\n  value: any[]\n  options?: Array<CheckboxProps | string>\n  optionType: 'default' | 'button'\n}\n\nconst TransformElCheckboxGroup = transformComponent(ElCheckboxGroup, {\n  change: 'input',\n})\n\nconst CheckboxGroupOption = defineComponent<CheckboxGroupProps>({\n  name: 'CheckboxGroup',\n  props: {\n    options: {\n      type: Array,\n      default: () => [],\n    },\n    optionType: {\n      type: String as PropType<CheckboxGroupProps['optionType']>,\n      default: 'default',\n    },\n  },\n  setup(customProps, { attrs, slots, listeners }) {\n    return () => {\n      const options = customProps.options || []\n      const children =\n        options.length !== 0\n          ? {\n              default: () =>\n                options.map((option) => {\n                  if (typeof option === 'string') {\n                    return h(\n                      Checkbox,\n                      {\n                        props: {\n                          option: {\n                            label: option,\n                            value: option,\n                          },\n                        },\n                        attrs: {\n                          optionType: customProps.optionType,\n                        },\n                      },\n                      slots?.option\n                        ? { default: () => slots.option({ option }) }\n                        : {}\n                    )\n                  } else {\n                    return h(\n                      Checkbox,\n                      {\n                        props: {\n                          option,\n                        },\n                        attrs: {\n                          optionType: customProps.optionType,\n                        },\n                      },\n                      slots?.option\n                        ? { default: () => slots.option({ option }) }\n                        : {}\n                    )\n                  }\n                }),\n            }\n          : slots\n      return h(\n        TransformElCheckboxGroup,\n        {\n          attrs: {\n            ...attrs,\n          },\n          on: listeners,\n        },\n        children\n      )\n    }\n  },\n})\n\nconst CheckboxGroup = connect(\n  CheckboxGroupOption,\n  mapProps({ dataSource: 'options' }),\n  mapReadPretty(PreviewText.Select, {\n    multiple: true,\n  })\n)\n\nexport const Checkbox = composeExport(connect(CheckboxOption), {\n  Group: CheckboxGroup,\n})\n"]}
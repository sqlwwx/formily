{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/form/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,oCAAwE;AACxE,wDAAsD;AACtD,8CAA4D;AAC5D,gDAA6C;AAG7C,IAAM,YAAY,GAAG,kBAAqC,CAAA;AAU7C,QAAA,IAAI,GAAG,IAAA,iCAAe,EAAY;IAC7C,IAAI,EAAE,OAAO;IACb,KAAK,EAAE;QACL,MAAM;QACN,WAAW;QACX,wBAAwB;QACxB,cAAc;QACd,oBAAoB;KACrB;IACD,KAAK,EAAL,UAAM,KAAK,EAAE,EAA2B;YAAzB,KAAK,WAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAA;QACpC,IAAM,GAAG,GAAG,IAAA,aAAO,GAAE,CAAA;QAErB,OAAO;YAEH,IAAA,IAAI,GAKF,KAAK,KALH,EACJ,KAIE,KAAK,UAJW,EAAlB,SAAS,mBAAG,MAAM,KAAA,EAClB,KAGE,KAAK,aAH6B,EAApC,YAAY,mBAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,KAAA,EACpC,KAEE,KAAK,mBAFyC,EAAhD,kBAAkB,mBAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,gBAAgB,KAAA,EAChD,KACE,KAAK,uBAD+C,EAAtD,sBAAsB,mBAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,sBAAsB,KAAA,CAC/C;YAET,IAAM,aAAa,GAAG,UAAC,IAAc;gBACnC,OAAO,IAAA,OAAC,EACN,0BAAW,CAAC,WAAW,EACvB;oBACE,KAAK,EAAE;wBACL,KAAK,EAAE,sBAAsB;qBAC9B;iBACF,EACD;oBACE,OAAO,EAAE,cAAM,OAAA;wBACb,IAAA,OAAC,EACC,wBAAU,EACV;4BACE,KAAK,eACA,KAAK,CACT;yBACF,EACD;4BACE,OAAO,EAAE,cAAM,OAAA;gCACb,IAAA,OAAC,EACC,SAAS,EACT;oCACE,EAAE,EAAE;wCACF,MAAM,EAAE,UAAC,CAAQ;;4CACf,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,eAAe,+CAAlB,CAAC,CAAqB,CAAA;4CACtB,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,cAAc,+CAAjB,CAAC,CAAoB,CAAA;4CACrB,IAAI;iDACD,MAAM,CAAC,YAAgC,CAAC;iDACxC,KAAK,CAAC,kBAAsC,CAAC,CAAA;wCAClD,CAAC;qCACF;iCACF,EACD,KAAK,CACN;6BACF,EAhBc,CAgBd;yBACF,CACF;qBACF,EA5Bc,CA4Bd;iBACF,CACF,CAAA;YACH,CAAC,CAAA;YAED,IAAI,IAAI,EAAE;gBACR,OAAO,IAAA,OAAC,EACN,YAAY,EACZ,EAAE,KAAK,EAAE,EAAE,IAAI,MAAA,EAAE,EAAE,EACnB;oBACE,OAAO,EAAE,cAAM,OAAA,aAAa,CAAC,IAAI,CAAC,EAAnB,CAAmB;iBACnC,CACF,CAAA;aACF;YAED,IAAI,CAAC,GAAG,CAAC,KAAK;gBAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAA;YAExE,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QACjC,CAAC,CAAA;IACH,CAAC;CACF,CAAC,CAAA;AAEF,kBAAe,YAAI,CAAA","sourcesContent":["import { Form as FormType, IFormFeedback } from '@formily/core'\nimport { FormProvider as _FormProvider, h, useForm } from '@formily/vue'\nimport { defineComponent } from '@vue/composition-api'\nimport { FormLayout, FormLayoutProps } from '../form-layout'\nimport { PreviewText } from '../preview-text'\nimport { Component, VNode } from 'vue'\n\nconst FormProvider = _FormProvider as unknown as Component\n\nexport interface FormProps extends FormLayoutProps {\n  form?: FormType\n  component?: Component\n  previewTextPlaceholder: string | (() => VNode)\n  onAutoSubmit?: (values: any) => any\n  onAutoSubmitFailed?: (feedbacks: IFormFeedback[]) => void\n}\n\nexport const Form = defineComponent<FormProps>({\n  name: 'FForm',\n  props: [\n    'form',\n    'component',\n    'previewTextPlaceholder',\n    'onAutoSubmit',\n    'onAutoSubmitFailed',\n  ],\n  setup(props, { attrs, slots, listeners }) {\n    const top = useForm()\n\n    return () => {\n      const {\n        form,\n        component = 'form',\n        onAutoSubmit = listeners?.autoSubmit,\n        onAutoSubmitFailed = listeners?.autoSubmitFailed,\n        previewTextPlaceholder = slots?.previewTextPlaceholder,\n      } = props\n\n      const renderContent = (form: FormType) => {\n        return h(\n          PreviewText.Placeholder,\n          {\n            props: {\n              value: previewTextPlaceholder,\n            },\n          },\n          {\n            default: () => [\n              h(\n                FormLayout,\n                {\n                  attrs: {\n                    ...attrs,\n                  },\n                },\n                {\n                  default: () => [\n                    h(\n                      component,\n                      {\n                        on: {\n                          submit: (e: Event) => {\n                            e?.stopPropagation?.()\n                            e?.preventDefault?.()\n                            form\n                              .submit(onAutoSubmit as (e: any) => void)\n                              .catch(onAutoSubmitFailed as (e: any) => void)\n                          },\n                        },\n                      },\n                      slots\n                    ),\n                  ],\n                }\n              ),\n            ],\n          }\n        )\n      }\n\n      if (form) {\n        return h(\n          FormProvider,\n          { props: { form } },\n          {\n            default: () => renderContent(form),\n          }\n        )\n      }\n\n      if (!top.value) throw new Error('must pass form instance by createForm')\n\n      return renderContent(top.value)\n    }\n  },\n})\n\nexport default Form\n"]}
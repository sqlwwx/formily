{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/select/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oCAAkE;AAClE,wDAAsD;AACtD,gDAA6C;AAM7C,yCAAmE;AACnE,+CAAkD;AAMlD,IAAM,YAAY,GAAG,IAAA,iCAAe,EAAc;IAChD,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,CAAC,SAAS,CAAC;IAClB,KAAK,YAAC,WAAW,EAAE,EAA2B;YAAzB,KAAK,WAAA,EAAE,KAAK,WAAA,EAAE,SAAS,eAAA;QAC1C,OAAO;YACL,IAAM,OAAO,GAAG,WAAW,CAAC,OAAO,IAAI,EAAE,CAAA;YACzC,IAAM,QAAQ,GACZ,OAAO,CAAC,MAAM,KAAK,CAAC;gBAClB,CAAC,CAAC;oBACE,OAAO,EAAE;wBACP,OAAA,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM;4BACjB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gCAC9B,OAAO,IAAA,OAAC,EACN,mBAAQ,EACR,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAC3C;oCACE,OAAO,EAAE,cAAM,OAAA;wCACb,IAAA,8BAAgB,EAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,EAAE,EAAE,MAAM,QAAA,EAAE,CAAC;qCAC5C,EAFc,CAEd;iCACF,CACF,CAAA;6BACF;iCAAM;gCACL,OAAO,IAAA,OAAC,EACN,mBAAQ,EACR;oCACE,KAAK,eACA,MAAM,CACV;iCACF,EACD;oCACE,OAAO,EAAE,cAAM,OAAA;wCACb,IAAA,8BAAgB,EAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,EAAE;4CAC9B,MAAM,QAAA;yCACP,CAAC;qCACH,EAJc,CAId;iCACF,CACF,CAAA;6BACF;wBACH,CAAC,CAAC;oBA5BF,CA4BE;iBACL;gBACH,CAAC,CAAC,KAAK,CAAA;YACX,OAAO,IAAA,OAAC,EACN,mBAAQ,EACR;gBACE,KAAK,eACA,KAAK,CACT;gBACD,EAAE,EAAE,SAAS;aACd,EACD,QAAQ,CACT,CAAA;QACH,CAAC,CAAA;IACH,CAAC;CACF,CAAC,CAAA;AAEW,QAAA,MAAM,GAAG,IAAA,aAAO,EAC3B,YAAY,EACZ,IAAA,cAAQ,EAAC,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAClD,IAAA,mBAAa,EAAC,0BAAW,CAAC,MAAM,CAAC,CAClC,CAAA;AAED,kBAAe,cAAM,CAAA","sourcesContent":["import { connect, mapProps, h, mapReadPretty } from '@formily/vue'\nimport { defineComponent } from '@vue/composition-api'\nimport { PreviewText } from '../preview-text'\n\nimport type {\n  Select as ElSelectProps,\n  Option as ElOptionProps,\n} from 'element-ui'\nimport { Select as ElSelect, Option as ElOption } from 'element-ui'\nimport { resolveComponent } from '../__builtins__'\n\nexport type SelectProps = ElSelectProps & {\n  options?: Array<ElOptionProps>\n}\n\nconst SelectOption = defineComponent<SelectProps>({\n  name: 'FSelect',\n  props: ['options'],\n  setup(customProps, { attrs, slots, listeners }) {\n    return () => {\n      const options = customProps.options || []\n      const children =\n        options.length !== 0\n          ? {\n              default: () =>\n                options.map((option) => {\n                  if (typeof option === 'string') {\n                    return h(\n                      ElOption,\n                      { props: { value: option, label: option } },\n                      {\n                        default: () => [\n                          resolveComponent(slots?.option, { option }),\n                        ],\n                      }\n                    )\n                  } else {\n                    return h(\n                      ElOption,\n                      {\n                        props: {\n                          ...option,\n                        },\n                      },\n                      {\n                        default: () => [\n                          resolveComponent(slots?.option, {\n                            option,\n                          }),\n                        ],\n                      }\n                    )\n                  }\n                }),\n            }\n          : slots\n      return h(\n        ElSelect,\n        {\n          attrs: {\n            ...attrs,\n          },\n          on: listeners,\n        },\n        children\n      )\n    }\n  },\n})\n\nexport const Select = connect(\n  SelectOption,\n  mapProps({ dataSource: 'options', loading: true }),\n  mapReadPretty(PreviewText.Select)\n)\n\nexport default Select\n"]}
{"version":3,"file":"SchemaField.js","sourceRoot":"","sources":["../../src/components/SchemaField.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useContext, Fragment } from 'react'\nimport { ISchema, Schema } from '@formily/json-schema'\nimport { RecursionField } from '.'\nimport { render } from '../shared/render'\nimport {\n  SchemaMarkupContext,\n  SchemaExpressionScopeContext,\n  SchemaOptionsContext,\n} from '../shared'\nimport {\n  ReactComponentPath,\n  JSXComponent,\n  ISchemaFieldReactFactoryOptions,\n  SchemaReactComponents,\n  ISchemaFieldProps,\n  ISchemaMarkupFieldProps,\n  ISchemaTypeFieldProps,\n} from '../types'\nconst env = {\n  nonameId: 0,\n}\n\nconst getRandomName = () => {\n  return `NO_NAME_FIELD_$${env.nonameId++}`\n}\n\nexport function createSchemaField<Components extends SchemaReactComponents>(\n  options: ISchemaFieldReactFactoryOptions<Components> = {}\n) {\n  function SchemaField<\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(props: ISchemaFieldProps<Decorator, Component>) {\n    const schema = Schema.isSchemaInstance(props.schema)\n      ? props.schema\n      : new Schema({\n          type: 'object',\n          ...props.schema,\n        })\n    const renderMarkup = () => {\n      env.nonameId = 0\n      if (props.schema) return null\n      return render(\n        <SchemaMarkupContext.Provider value={schema}>\n          {props.children}\n        </SchemaMarkupContext.Provider>\n      )\n    }\n\n    const renderChildren = () => {\n      return <RecursionField {...props} schema={schema} />\n    }\n\n    return (\n      <SchemaOptionsContext.Provider\n        value={{\n          ...options,\n          components: {\n            ...options.components,\n            ...props.components,\n          },\n        }}\n      >\n        <SchemaExpressionScopeContext.Provider\n          value={{\n            ...options.scope,\n            ...props.scope,\n          }}\n        >\n          {renderMarkup()}\n          {renderChildren()}\n        </SchemaExpressionScopeContext.Provider>\n      </SchemaOptionsContext.Provider>\n    )\n  }\n\n  SchemaField.displayName = 'SchemaField'\n\n  function MarkupField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaMarkupFieldProps<Components, Component, Decorator>) {\n    const parent = useContext(SchemaMarkupContext)\n    if (!parent) return <Fragment />\n    const renderChildren = () => {\n      return <React.Fragment>{props.children}</React.Fragment>\n    }\n    const appendArraySchema = (schema: ISchema) => {\n      if (parent.items) {\n        return parent.addProperty(name, schema)\n      } else {\n        return parent.setItems(props)\n      }\n    }\n    const name = props.name || getRandomName()\n    if (parent.type === 'object' || parent.type === 'void') {\n      const schema = parent.addProperty(name, props)\n      return (\n        <SchemaMarkupContext.Provider value={schema}>\n          {renderChildren()}\n        </SchemaMarkupContext.Provider>\n      )\n    } else if (parent.type === 'array') {\n      const schema = appendArraySchema(props)\n      return (\n        <SchemaMarkupContext.Provider\n          value={Array.isArray(schema) ? schema[0] : schema}\n        >\n          {props.children}\n        </SchemaMarkupContext.Provider>\n      )\n    } else {\n      return renderChildren()\n    }\n  }\n\n  MarkupField.displayName = 'MarkupField'\n\n  function StringField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"string\" />\n  }\n\n  StringField.displayName = 'StringField'\n\n  function ObjectField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"object\" />\n  }\n\n  ObjectField.displayName = 'ObjectField'\n\n  function ArrayField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"array\" />\n  }\n\n  ArrayField.displayName = 'ArrayField'\n  function BooleanField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"boolean\" />\n  }\n\n  BooleanField.displayName = 'BooleanField'\n\n  function NumberField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"number\" />\n  }\n\n  NumberField.displayName = 'NumberField'\n\n  function DateField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"date\" />\n  }\n\n  DateField.displayName = 'DateField'\n\n  function DateTimeField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"datetime\" />\n  }\n\n  DateTimeField.displayName = 'DateTimeField'\n\n  function VoidField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"void\" />\n  }\n\n  VoidField.displayName = 'VoidField'\n\n  SchemaField.Markup = MarkupField\n  SchemaField.String = StringField\n  SchemaField.Object = ObjectField\n  SchemaField.Array = ArrayField\n  SchemaField.Boolean = BooleanField\n  SchemaField.Date = DateField\n  SchemaField.DateTime = DateTimeField\n  SchemaField.Void = VoidField\n  SchemaField.Number = NumberField\n\n  return SchemaField\n}\n"]}
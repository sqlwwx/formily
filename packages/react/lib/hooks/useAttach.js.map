{"version":3,"file":"useAttach.js","sourceRoot":"","sources":["../../src/hooks/useAttach.ts"],"names":[],"mappings":";;;AAAA,+BAAyC;AAOlC,IAAM,SAAS,GAAG,UAA2B,MAAS;IAC3D,IAAM,YAAY,GAAG,IAAA,cAAM,EAAiB,IAAI,CAAC,CAAA;IACjD,IAAA,iBAAS,EAAC;QACR,IAAI,YAAY,CAAC,OAAO,IAAI,MAAM,KAAK,YAAY,CAAC,OAAO,EAAE;YAC3D,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,CAAA;SACjC;QACD,YAAY,CAAC,OAAO,GAAG,MAAM,CAAA;QAC7B,MAAM,CAAC,OAAO,EAAE,CAAA;QAChB,OAAO;YACL,MAAM,CAAC,SAAS,EAAE,CAAA;QACpB,CAAC,CAAA;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;IACZ,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAbY,QAAA,SAAS,aAarB","sourcesContent":["import { useRef, useEffect } from 'react'\n\ninterface IRecycleTarget {\n  onMount: () => void\n  onUnmount: () => void\n}\n\nexport const useAttach = <T extends IRecycleTarget>(target: T): T => {\n  const oldTargetRef = useRef<IRecycleTarget>(null)\n  useEffect(() => {\n    if (oldTargetRef.current && target !== oldTargetRef.current) {\n      oldTargetRef.current.onUnmount()\n    }\n    oldTargetRef.current = target\n    target.onMount()\n    return () => {\n      target.onUnmount()\n    }\n  }, [target])\n  return target\n}\n"]}
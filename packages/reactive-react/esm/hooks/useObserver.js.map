{"version":3,"file":"useObserver.js","sourceRoot":"","sources":["../../src/hooks/useObserver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAA;AAC3C,OAAO,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAA;AAE5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAA;AAEjD;IAAA;IAAiC,CAAC;IAAD,gCAAC;AAAD,CAAC,AAAlC,IAAkC;AAElC,SAAS,gCAAgC;IACvC,OAAO,IAAI,yBAAyB,EAAE,CAAA;AACxC,CAAC;AAED,MAAM,CAAC,IAAM,WAAW,GAAG,UACzB,IAAO,EACP,OAA0B;IAE1B,IAAM,WAAW,GAAG,cAAc,EAAE,CAAA;IACpC,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACtC,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAU,IAAI,CAAC,CAAA;IAC9C,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAoB,CAAA;IACxC,IAAA,KAAA,OAA0B,KAAK,CAAC,QAAQ,CAC5C,gCAAgC,CACjC,IAAA,EAFM,qBAAqB,QAE3B,CAAA;IACD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;QACvB,UAAU,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC;YAC/B,IAAI,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAA,KAAK,UAAU,EAAE;gBAC5C,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;aAC/B;iBAAM;gBACL,WAAW,EAAE,CAAA;aACd;QACH,CAAC,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC,CAAA;KACzB;IAED,yDAAyD;IACzD,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;QAClB,KAAK,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAC;YACnC,IAAI,UAAU,CAAC,OAAO,EAAE;gBACtB,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;aAC7B;QACH,CAAC,CAAC,CAAA;QACF,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;KAC1C;IAED,KAAK,CAAC,SAAS,CAAC;QACd,UAAU,CAAC,OAAO,GAAG,KAAK,CAAA;QAC1B,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;QACrB,OAAO;YACL,UAAU,CAAC,OAAO,GAAG,IAAI,CAAA;YACzB,IAAI,UAAU,CAAC,OAAO,EAAE;gBACtB,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;gBAC5B,UAAU,CAAC,OAAO,GAAG,IAAI,CAAA;aAC1B;QACH,CAAC,CAAA;IACH,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AACvC,CAAC,CAAA","sourcesContent":["import React from 'react'\nimport { Tracker } from '@formily/reactive'\nimport { GarbageCollector } from '../shared'\nimport { IObserverOptions } from '../types'\nimport { useForceUpdate } from './useForceUpdate'\n\nclass ObjectToBeRetainedByReact {}\n\nfunction objectToBeRetainedByReactFactory() {\n  return new ObjectToBeRetainedByReact()\n}\n\nexport const useObserver = <T extends () => any>(\n  view: T,\n  options?: IObserverOptions\n): ReturnType<T> => {\n  const forceUpdate = useForceUpdate()\n  const unMountRef = React.useRef(false)\n  const trackerRef = React.useRef<Tracker>(null)\n  const gcRef = React.useRef<GarbageCollector>()\n  const [objectRetainedByReact] = React.useState(\n    objectToBeRetainedByReactFactory\n  )\n  if (!trackerRef.current) {\n    trackerRef.current = new Tracker(() => {\n      if (typeof options?.scheduler === 'function') {\n        options.scheduler(forceUpdate)\n      } else {\n        forceUpdate()\n      }\n    }, options?.displayName)\n  }\n\n  //StrictMode/ConcurrentMode会导致组件无法正确触发UnMount，所以只能自己做垃圾回收\n  if (!gcRef.current) {\n    gcRef.current = new GarbageCollector(() => {\n      if (trackerRef.current) {\n        trackerRef.current.dispose()\n      }\n    })\n    gcRef.current.open(objectRetainedByReact)\n  }\n\n  React.useEffect(() => {\n    unMountRef.current = false\n    gcRef.current.close()\n    return () => {\n      unMountRef.current = true\n      if (trackerRef.current) {\n        trackerRef.current.dispose()\n        trackerRef.current = null\n      }\n    }\n  }, [])\n\n  return trackerRef.current.track(view)\n}\n"]}
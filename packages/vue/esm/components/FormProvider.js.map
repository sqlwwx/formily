{"version":3,"file":"FormProvider.js","sourceRoot":"","sources":["../../src/components/FormProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,UAAU,CAAA;AAC1D,OAAO,EACL,UAAU,EACV,WAAW,EACX,kBAAkB,EAClB,YAAY,EACZ,2BAA2B,EAC3B,mBAAmB,GACpB,MAAM,mBAAmB,CAAA;AAE1B,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAA;AAC9C,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAA;AAClE,OAAO,CAAC,MAAM,aAAa,CAAA;AAC3B,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAA;AAI7C,eAAe,eAAe,CAAiB;IAC7C,IAAI,EAAE,cAAc;IACpB,YAAY,EAAE,KAAK;IACnB,KAAK,EAAE;QACL,IAAI,EAAE;YACJ,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI;SACf;KACF;IACD,KAAK,EAAL,UAAM,KAAqB,EAAE,EAAgB;YAAd,KAAK,WAAA,EAAE,KAAK,WAAA;QACzC,IAAM,OAAO,GAAG,cAAM,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAA;QAC1B,IAAA,KAAA,OAAqB,SAAS,CAAC,OAAO,EAAE,CAAC,IAAA,EAAxC,OAAO,QAAA,EAAE,OAAO,QAAwB,CAAA;QAC/C,KAAK,CACH,cAAM,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,EAChB,cAAM,OAAA,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,EAApC,CAAoC,CAC3C,CAAA;QAED,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;QAC5B,mBAAmB,CAAC;YAClB,WAAW;YACX,kBAAkB;YAClB,YAAY;YACZ,2BAA2B;YAC3B,mBAAmB;SACpB,CAAC,CAAA;QAEF,OAAO,cAAM,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAE,KAAK,OAAA,EAAE,EAAE,KAAK,CAAC,EAA7B,CAA6B,CAAA;IAC5C,CAAC;CACF,CAA+C,CAAA","sourcesContent":["import { provide, defineComponent, watch } from 'vue-demi'\nimport {\n  FormSymbol,\n  FieldSymbol,\n  SchemaMarkupSymbol,\n  SchemaSymbol,\n  SchemaExpressionScopeSymbol,\n  SchemaOptionsSymbol,\n} from '../shared/context'\nimport { IProviderProps } from '../types'\nimport { useAttach } from '../hooks/useAttach'\nimport { useInjectionCleaner } from '../hooks/useInjectionCleaner'\nimport h from '../shared/h'\nimport { Fragment } from '../shared/fragment'\n\nimport type { DefineComponent } from '../types'\n\nexport default defineComponent<IProviderProps>({\n  name: 'FormProvider',\n  inheritAttrs: false,\n  props: {\n    form: {\n      type: Object,\n      required: true,\n    },\n  },\n  setup(props: IProviderProps, { attrs, slots }) {\n    const getForm = () => props.form\n    const [formRef, checker] = useAttach(getForm())\n    watch(\n      () => props.form,\n      () => (formRef.value = checker(getForm()))\n    )\n\n    provide(FormSymbol, formRef)\n    useInjectionCleaner([\n      FieldSymbol,\n      SchemaMarkupSymbol,\n      SchemaSymbol,\n      SchemaExpressionScopeSymbol,\n      SchemaOptionsSymbol,\n    ])\n\n    return () => h(Fragment, { attrs }, slots)\n  },\n}) as unknown as DefineComponent<IProviderProps>\n"]}
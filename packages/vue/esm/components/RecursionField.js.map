{"version":3,"file":"RecursionField.js","sourceRoot":"","sources":["../../src/components/RecursionField.ts"],"names":[],"mappings":"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","sourcesContent":["import { inject, provide, watch, defineComponent, shallowRef } from 'vue-demi'\nimport { GeneralField } from '@formily/core'\nimport { isFn, isValid } from '@formily/shared'\nimport { Schema } from '@formily/json-schema'\nimport { observer } from '@formily/reactive-vue'\nimport {\n  SchemaSymbol,\n  SchemaOptionsSymbol,\n  SchemaExpressionScopeSymbol,\n} from '../shared'\nimport { useField } from '../hooks'\nimport ObjectField from './ObjectField'\nimport ArrayField from './ArrayField'\nimport Field from './Field'\nimport VoidField from './VoidField'\nimport { h } from '../shared/h'\nimport { Fragment } from '../shared/fragment'\n\nimport type { IRecursionFieldProps, DefineComponent } from '../types'\n\nconst RecursionField = observer(\n  defineComponent<IRecursionFieldProps>({\n    name: 'RecursionField',\n    inheritAttrs: false,\n    props: {\n      schema: {\n        required: true,\n      },\n      name: [String, Number],\n      basePath: {},\n      onlyRenderProperties: {\n        type: Boolean,\n        default: undefined,\n      },\n      onlyRenderSelf: {\n        type: Boolean,\n        default: undefined,\n      },\n      mapProperties: {},\n      filterProperties: {},\n    },\n    setup(props: IRecursionFieldProps) {\n      const parentRef = useField()\n      const optionsRef = inject(SchemaOptionsSymbol)\n      const scopeRef = inject(SchemaExpressionScopeSymbol)\n      const createSchema = (schemaProp: IRecursionFieldProps['schema']) =>\n        new Schema(schemaProp)\n      const fieldSchemaRef = shallowRef(createSchema(props.schema))\n\n      watch([() => props.schema], () => {\n        fieldSchemaRef.value = createSchema(props.schema)\n      })\n\n      const getPropsFromSchema = (schema: Schema) =>\n        schema?.toFieldProps?.({\n          ...optionsRef.value,\n          get scope() {\n            return {\n              ...optionsRef.value.scope,\n              ...scopeRef.value,\n            }\n          },\n        })\n      const fieldPropsRef = shallowRef(getPropsFromSchema(fieldSchemaRef.value))\n\n      watch([fieldSchemaRef, optionsRef], () => {\n        fieldPropsRef.value = getPropsFromSchema(fieldSchemaRef.value)\n      })\n\n      const getBasePath = () => {\n        if (props.onlyRenderProperties) {\n          return props.basePath || parentRef?.value?.address.concat(props.name)\n        }\n        return props.basePath || parentRef?.value?.address\n      }\n\n      provide(SchemaSymbol, fieldSchemaRef)\n\n      return () => {\n        const basePath = getBasePath()\n        const fieldProps = fieldPropsRef.value\n\n        const renderProperties = (field?: GeneralField) => {\n          if (props.onlyRenderSelf) return\n          const properties = Schema.getOrderProperties(fieldSchemaRef.value)\n          if (!properties.length) return\n          const children = properties.map(({ schema: item, key: name }) => {\n            const base = field?.address || basePath\n            let schema: Schema = item\n            if (isFn(props.mapProperties)) {\n              const mapped = props.mapProperties(item, name)\n              if (mapped) {\n                schema = mapped\n              }\n            }\n            if (isFn(props.filterProperties)) {\n              if (props.filterProperties(schema, name) === false) {\n                return null\n              }\n            }\n            return h(\n              RecursionField,\n              {\n                key: name,\n                attrs: {\n                  schema,\n                  name,\n                  basePath: base,\n                },\n              },\n              {}\n            )\n          })\n\n          const slots: Record<string, () => any> = {}\n          if (children.length > 0) {\n            slots.default = () => [...children]\n          }\n\n          return h(Fragment, {}, slots)\n        }\n\n        const render = () => {\n          if (!isValid(props.name)) return renderProperties()\n          if (fieldSchemaRef.value.type === 'object') {\n            if (props.onlyRenderProperties) return renderProperties()\n            return h(\n              ObjectField,\n              {\n                attrs: {\n                  ...fieldProps,\n                  name: props.name,\n                  basePath: basePath,\n                },\n              },\n              {\n                default: ({ field }) => [renderProperties(field)],\n              }\n            )\n          } else if (fieldSchemaRef.value.type === 'array') {\n            return h(\n              ArrayField,\n              {\n                attrs: {\n                  ...fieldProps,\n                  name: props.name,\n                  basePath: basePath,\n                },\n              },\n              {}\n            )\n          } else if (fieldSchemaRef.value.type === 'void') {\n            if (props.onlyRenderProperties) return renderProperties()\n            return h(\n              VoidField,\n              {\n                attrs: {\n                  ...fieldProps,\n                  name: props.name,\n                  basePath: basePath,\n                },\n              },\n              {\n                default: ({ field }) => [renderProperties(field)],\n              }\n            )\n          }\n\n          return h(\n            Field,\n            {\n              attrs: {\n                ...fieldProps,\n                name: props.name,\n                basePath: basePath,\n              },\n            },\n            {}\n          )\n        }\n\n        if (!fieldSchemaRef.value) return\n\n        return render()\n      }\n    },\n  }) as unknown as DefineComponent<IRecursionFieldProps>\n)\n\nexport default RecursionField\n"]}
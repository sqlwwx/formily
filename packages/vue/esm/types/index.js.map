{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/types/index.ts"],"names":[],"mappings":"","sourcesContent":["import type { Vue2Component } from './vue2'\nimport type { Vue3Component } from './vue3'\nimport {\n  Form,\n  IFieldFactoryProps,\n  IVoidFieldFactoryProps,\n  GeneralField,\n  Field,\n  ObjectField,\n  FormPatternTypes,\n  FieldDisplayTypes,\n  FieldValidator,\n} from '@formily/core'\nimport type { FormPathPattern } from '@formily/shared'\nimport type { ISchema, Schema, SchemaKey } from '@formily/json-schema'\nimport type { DefineComponent as DefineVue3Component } from '@type-helper/vue3'\n\nexport type DefineComponent<Props = Record<string, any>> =\n  DefineVue3Component<Props>\n\nexport type VueComponent<Props = Record<string, any>> =\n  | Vue2Component<Props>\n  | Vue3Component<Props>\n  | Props\nexport type VueComponentOptionsWithProps = {\n  props: unknown\n}\nexport type VueComponentProps<T extends VueComponent> =\n  T extends VueComponentOptionsWithProps ? T['props'] : T\n\nexport interface IProviderProps {\n  form: Form\n}\n\nexport type IFieldProps<\n  D extends VueComponent = VueComponent,\n  C extends VueComponent = VueComponent\n> = IFieldFactoryProps<D, C>\n\nexport type IVoidFieldProps<\n  D extends VueComponent = VueComponent,\n  C extends VueComponent = VueComponent\n> = IVoidFieldFactoryProps<D, C>\n\nexport type IArrayFieldProps = IFieldProps\nexport type IObjectFieldProps = IFieldProps\n\nexport interface IReactiveFieldProps {\n  field: GeneralField\n}\n\nexport interface IComponentMapper<T extends VueComponent = any> {\n  (target: T): VueComponent\n}\n\nexport type IStateMapper<Props> =\n  | {\n      [key in keyof Field]?: keyof Props | boolean\n    }\n  | ((props: Props, field: GeneralField) => Props)\n\nexport type SchemaVueComponents = Record<string, VueComponent>\n\nexport interface ISchemaFieldVueFactoryOptions<\n  Components extends SchemaVueComponents = any\n> {\n  components?: Components\n  scope?: any\n}\n\nexport interface ISchemaFieldProps<\n  Decorator extends VueComponent = VueComponent,\n  Component extends VueComponent = VueComponent,\n  InnerField = ObjectField<Decorator, Component>\n> extends Omit<IFieldFactoryProps<Decorator, Component, InnerField>, 'name'> {\n  schema?: ISchema\n  components?: {\n    [key: string]: VueComponent\n  }\n  scope?: any\n  name?: SchemaKey\n}\n\nexport interface ISchemaMapper {\n  (schema: Schema, name: SchemaKey): Schema\n}\n\nexport interface ISchemaFilter {\n  (schema: Schema, name: SchemaKey): boolean\n}\n\nexport interface IRecursionFieldProps {\n  schema: Schema\n  name?: SchemaKey\n  basePath?: FormPathPattern\n  onlyRenderProperties?: boolean\n  onlyRenderSelf?: boolean\n  mapProperties?: ISchemaMapper\n  filterProperties?: ISchemaFilter\n}\n\nexport type ObjectKey = string | number | boolean | symbol\n\nexport type KeyOfComponents<T> = keyof T\n\nexport type ComponentPath<\n  T,\n  Key extends KeyOfComponents<T> = KeyOfComponents<T>\n> = Key extends string ? Key : never\n\nexport type ComponentPropsByPathValue<\n  T extends SchemaVueComponents,\n  P extends ComponentPath<T>\n> = P extends keyof T ? VueComponentProps<T[P]> : never\n\nexport type ISchemaMarkupFieldProps<\n  Components extends SchemaVueComponents = SchemaVueComponents,\n  Decorator extends ComponentPath<Components> = ComponentPath<Components>,\n  Component extends ComponentPath<Components> = ComponentPath<Components>\n> = ISchema<\n  Decorator,\n  Component,\n  ComponentPropsByPathValue<Components, Decorator>,\n  ComponentPropsByPathValue<Components, Component>,\n  FormPatternTypes,\n  FieldDisplayTypes,\n  FieldValidator,\n  string,\n  GeneralField\n>\n\nexport type ISchemaTypeFieldProps<\n  Components extends SchemaVueComponents = SchemaVueComponents,\n  Decorator extends ComponentPath<Components> = ComponentPath<Components>,\n  Component extends ComponentPath<Components> = ComponentPath<Components>\n> = Omit<ISchemaMarkupFieldProps<Components, Decorator, Component>, 'type'>\n"]}